version: '3.8'

services:
  # Core Database - Single source of truth
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeThisPassword}
      POSTGRES_MULTIPLE_DATABASES: cortex_db,n8n,flowise
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - cortex_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # n8n - Primary Orchestration Engine
  n8n:
    image: n8nio/n8n:latest
    restart: unless-stopped
    environment:
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-ChangeThisToSecureKey}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_JWT_SECRET:-ChangeThisToSecureSecret}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-ChangeThisPassword}
      - DB_POSTGRESDB_DATABASE=n8n
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=336
      - N8N_METRICS=true
      - N8N_METRICS_INCLUDE_DEFAULT_METRICS=true
      - N8N_METRICS_INCLUDE_API_ENDPOINTS=true
      - N8N_METRICS_INCLUDE_API_PATH_LABEL=true
      - N8N_METRICS_INCLUDE_API_METHOD_LABEL=true
      - N8N_METRICS_INCLUDE_API_STATUS_CODE_LABEL=true
      - WEBHOOK_URL=http://n8n:5678/
      - N8N_PROTOCOL=http
      - NODE_FUNCTION_ALLOW_BUILTIN=*
      - NODE_FUNCTION_ALLOW_EXTERNAL=*
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./shared:/data/shared
      - ./n8n/backup:/backup
      - ./n8n/custom-nodes:/home/node/.n8n/custom
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cortex_network

  # Qdrant - Vector Database for AI embeddings
  qdrant:
    image: qdrant/qdrant:latest
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./qdrant/config:/qdrant/config
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - cortex_network

  # Neo4j - Knowledge Graph Database
  neo4j:
    image: neo4j:5-community
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-ChangeThisPassword}
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - cortex_network

  # Redis - Caching and Message Queue
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cortex_network

  # Flowise - Visual AI Flow Builder
  flowise:
    image: flowiseai/flowise
    restart: unless-stopped
    environment:
      - PORT=3001
      - DATABASE_TYPE=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:-ChangeThisPassword}
      - DATABASE_NAME=flowise
      - FLOWISE_USERNAME=${FLOWISE_USERNAME:-admin}
      - FLOWISE_PASSWORD=${FLOWISE_PASSWORD:-admin}
      - APIKEY_PATH=/data/.flowise
      - SECRETKEY_PATH=/data/.flowise
      - LOG_PATH=/data/.flowise/logs
    ports:
      - "3001:3001"
    volumes:
      - flowise_data:/data/.flowise
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cortex_network

  # InfluxDB - COMMENTED OUT: Running natively on Windows
  # If you need to run InfluxDB in Docker instead of native Windows:
  # 1. Stop the Windows InfluxDB service
  # 2. Uncomment this section
  # 3. Update Grafana datasource to use influxdb:8086 instead of host.docker.internal:8086
  #
  # influxdb:
  #   image: influxdb:2
  #   restart: unless-stopped
  #   environment:
  #     - DOCKER_INFLUXDB_INIT_MODE=setup
  #     - DOCKER_INFLUXDB_INIT_USERNAME=admin
  #     - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_PASSWORD:-ChangeThisPassword}
  #     - DOCKER_INFLUXDB_INIT_ORG=cortex
  #     - DOCKER_INFLUXDB_INIT_BUCKET=metrics
  #     - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_TOKEN:-ChangeThisToSecureToken}
  #   ports:
  #     - "8086:8086"
  #   volumes:
  #     - influxdb_data:/var/lib/influxdb2
  #     - influxdb_config:/etc/influxdb2
  #   networks:
  #     - cortex_network

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - cortex_network

  # Grafana - Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-ChangeThisPassword}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    # Add extra_hosts to allow Grafana to connect to native Windows InfluxDB
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - prometheus
      # Remove influxdb dependency since it's running natively
      - loki
    networks:
      - cortex_network

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/loki-config.yaml
      - loki_data:/loki
    networks:
      - cortex_network

  # Promtail - Log Collector
  promtail:
    image: grafana/promtail:latest
    restart: unless-stopped
    command: -config.file=/etc/promtail/promtail-config.yaml
    volumes:
      - ./monitoring/promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      - loki
    networks:
      - cortex_network

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    networks:
      - cortex_network

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - cortex_network

  # Open WebUI - AI Model Interface (Optional)
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-ChangeThisToSecureSecret}
      - WEBUI_AUTH=true
      - WEBUI_NAME=CORTEX AI Interface
      - OLLAMA_API_BASE_URL=http://host.docker.internal:11434/api
    volumes:
      - open_webui_data:/app/backend/data
    networks:
      - cortex_network
    profiles:
      - optional

volumes:
  postgres_data:
  n8n_data:
  qdrant_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  flowise_data:
  # Keep influxdb volumes commented for potential future use
  # influxdb_data:
  # influxdb_config:
  prometheus_data:
  grafana_data:
  loki_data:
  open_webui_data:

networks:
  cortex_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
